// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://gopos.web.id/terms/",
        "contact": {
            "name": "Muhamad Fadli Aqil",
            "url": "http://instagram.com/fadliiaqil_",
            "email": "fadli.aqil12@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Authenticates a user and returns an access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login",
                "operationId": "loginUser",
                "parameters": [
                    {
                        "description": "User credentials for login",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.inAuthDtos"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.DataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/auth.outAuthDtos"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Logs out the user by invalidating the provided access token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout",
                "operationId": "logoutUser",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"Bearer \"",
                        "description": "Bearer \u003caccess_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout Successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Retrieves the profile data for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Profile",
                "operationId": "getProfile",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"Bearer \"",
                        "description": "Bearer \u003caccess_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.DataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/user.outUserDto"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create a new user",
                "operationId": "createUser",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"Bearer \"",
                        "description": "Bearer \u003caccess_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.inUserDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.DataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.inUserDto"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update user data with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user data",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"Bearer \"",
                        "description": "Bearer \u003caccess_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Updated user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.inUserDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.DataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.inUserDto"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/user/all": {
            "get": {
                "description": "Retrieves a list of users with pagination support.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get All Users",
                "operationId": "getAllUsers",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"Bearer \"",
                        "description": "Bearer \u003caccess_token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default: 1)",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users with pagination",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.DataResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/user.outPaginateDto"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.inAuthDtos": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password for authentication",
                    "type": "string"
                },
                "username": {
                    "description": "Username for authentication",
                    "type": "string"
                }
            }
        },
        "auth.outAuthDtos": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "User ID",
                    "type": "integer"
                },
                "token": {
                    "description": "JWT token for authentication",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the authenticated user",
                    "type": "string"
                }
            }
        },
        "user.inUserDto": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address of the user",
                    "type": "string"
                },
                "fullname": {
                    "description": "Full name of the user",
                    "type": "string"
                },
                "id": {
                    "description": "User ID (used in update operations)",
                    "type": "integer"
                },
                "password": {
                    "description": "Password for the user",
                    "type": "string"
                },
                "role_id": {
                    "description": "Role ID assigned to the user",
                    "type": "integer"
                },
                "username": {
                    "description": "Username for the user",
                    "type": "string"
                }
            }
        },
        "user.outPaginateDto": {
            "type": "object",
            "properties": {
                "pagination": {},
                "users": {}
            }
        },
        "user.outUserDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp indicating when the user was created",
                    "type": "string"
                },
                "email": {
                    "description": "Email address of the user",
                    "type": "string"
                },
                "fullname": {
                    "description": "Full name of the user",
                    "type": "string"
                },
                "id": {
                    "description": "User ID",
                    "type": "integer"
                },
                "role": {
                    "description": "Role assigned to the user",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string"
                },
                "verfied_at": {
                    "description": "Timestamp indicating when the user was verified",
                    "type": "string"
                }
            }
        },
        "utils.DataResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer Token": {
            "type": "apiKey",
            "name": "Bearer Token",
            "in": "Authorization"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "api.gopos.web.id",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GoPOS API",
	Description:      "Rest API Endpoint for GoPOS.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
